# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from firebase_service_python import scheduler_pb2 as firebase__service__python_dot_Protos_dot_scheduler__pb2


class MovieScheduleServiceStub(object):
    """The movie list service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddMovieToSchedule = channel.unary_unary(
                '/MovieScheduleService/AddMovieToSchedule',
                request_serializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.ScheduleMovie.SerializeToString,
                response_deserializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.Schedule.FromString,
                )
        self.GetAudSchedulesByDate = channel.unary_unary(
                '/MovieScheduleService/GetAudSchedulesByDate',
                request_serializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.Date.SerializeToString,
                response_deserializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.AuditoriumSchedules.FromString,
                )
        self.ReserveSeat = channel.unary_unary(
                '/MovieScheduleService/ReserveSeat',
                request_serializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.Seat.SerializeToString,
                response_deserializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.Seat.FromString,
                )
        self.GetShowtimesByDateAndMovieUuid = channel.unary_unary(
                '/MovieScheduleService/GetShowtimesByDateAndMovieUuid',
                request_serializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.MovieShowtimesIn.SerializeToString,
                response_deserializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.MovieShowings.FromString,
                )
        self.ScheduleMovieEvent = channel.unary_unary(
                '/MovieScheduleService/ScheduleMovieEvent',
                request_serializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.Movie.SerializeToString,
                response_deserializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.Movie.FromString,
                )
        self.GetSeats = channel.unary_unary(
                '/MovieScheduleService/GetSeats',
                request_serializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.GetSeatsIn.SerializeToString,
                response_deserializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.Seats.FromString,
                )


class MovieScheduleServiceServicer(object):
    """The movie list service definition.
    """

    def AddMovieToSchedule(self, request, context):
        """Gets movie info
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAudSchedulesByDate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReserveSeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetShowtimesByDateAndMovieUuid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScheduleMovieEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSeats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MovieScheduleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddMovieToSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.AddMovieToSchedule,
                    request_deserializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.ScheduleMovie.FromString,
                    response_serializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.Schedule.SerializeToString,
            ),
            'GetAudSchedulesByDate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAudSchedulesByDate,
                    request_deserializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.Date.FromString,
                    response_serializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.AuditoriumSchedules.SerializeToString,
            ),
            'ReserveSeat': grpc.unary_unary_rpc_method_handler(
                    servicer.ReserveSeat,
                    request_deserializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.Seat.FromString,
                    response_serializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.Seat.SerializeToString,
            ),
            'GetShowtimesByDateAndMovieUuid': grpc.unary_unary_rpc_method_handler(
                    servicer.GetShowtimesByDateAndMovieUuid,
                    request_deserializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.MovieShowtimesIn.FromString,
                    response_serializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.MovieShowings.SerializeToString,
            ),
            'ScheduleMovieEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.ScheduleMovieEvent,
                    request_deserializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.Movie.FromString,
                    response_serializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.Movie.SerializeToString,
            ),
            'GetSeats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSeats,
                    request_deserializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.GetSeatsIn.FromString,
                    response_serializer=firebase__service__python_dot_Protos_dot_scheduler__pb2.Seats.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MovieScheduleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MovieScheduleService(object):
    """The movie list service definition.
    """

    @staticmethod
    def AddMovieToSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MovieScheduleService/AddMovieToSchedule',
            firebase__service__python_dot_Protos_dot_scheduler__pb2.ScheduleMovie.SerializeToString,
            firebase__service__python_dot_Protos_dot_scheduler__pb2.Schedule.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAudSchedulesByDate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MovieScheduleService/GetAudSchedulesByDate',
            firebase__service__python_dot_Protos_dot_scheduler__pb2.Date.SerializeToString,
            firebase__service__python_dot_Protos_dot_scheduler__pb2.AuditoriumSchedules.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReserveSeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MovieScheduleService/ReserveSeat',
            firebase__service__python_dot_Protos_dot_scheduler__pb2.Seat.SerializeToString,
            firebase__service__python_dot_Protos_dot_scheduler__pb2.Seat.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetShowtimesByDateAndMovieUuid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MovieScheduleService/GetShowtimesByDateAndMovieUuid',
            firebase__service__python_dot_Protos_dot_scheduler__pb2.MovieShowtimesIn.SerializeToString,
            firebase__service__python_dot_Protos_dot_scheduler__pb2.MovieShowings.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ScheduleMovieEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MovieScheduleService/ScheduleMovieEvent',
            firebase__service__python_dot_Protos_dot_scheduler__pb2.Movie.SerializeToString,
            firebase__service__python_dot_Protos_dot_scheduler__pb2.Movie.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSeats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MovieScheduleService/GetSeats',
            firebase__service__python_dot_Protos_dot_scheduler__pb2.GetSeatsIn.SerializeToString,
            firebase__service__python_dot_Protos_dot_scheduler__pb2.Seats.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
