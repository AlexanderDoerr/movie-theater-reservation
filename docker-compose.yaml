version: '3.8'

networks:
  netPRO290:
    external: false

services:
  EurekaServer:
    container_name: EurekaServer
    image: steeltoeoss/eureka-server:latest
    restart: always
    hostname: EurekaServer
    ports:
      - 8761:8761
    networks:
      - netPRO290

  APIGatewayOcelot:
    container_name: APIGatewayOcelot
    build:
      context: ./dotnet-apigateway-ocelot
      dockerfile: Dockerfile
    image: apigatewayocelot:1
    restart: always
    hostname: APIGatewayOcelot
    ports:
      - 5041:80
    networks:
      - netPRO290

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    restart: always
    environment:
      - ZOOKEEPER_CLIENT_PORT=2182
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - netPRO290

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      - "9092:9092"
    networks:
      - netPRO290
    depends_on:
      - zookeeper
    restart: always
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2182
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1

  Firebase-Service-Python:
    build:
      context: ./firebase_service_python
      dockerfile: Dockerfile
    image: firebaseservicepython:1
    restart: always
    ports: 
      - "50051:50051"
    networks:
      - netPRO290

  Sql-gRPC-Service:
    build:
      context: ./SQL_gRPC_Service
      dockerfile: Dockerfile
    image: sqlservicegrpc:1
    restart: always
    ports: 
      - "50052:50052"
    networks:
      - netPRO290

  # emailmicroservice:
  #   environment:
  #       - KAFKA_BROKER_SERVER=broker:29092
  #   build: ./EmailMicroService
  #   ports:
  #     - "3030:3030"


  OrderServiceClientAPI:
    build:
      context: ./orderserviceclientapi
      dockerfile: Dockerfile
    image: orderserviceclientapi:1
    restart: always
    networks:
      - netPRO290
    deploy:
      mode: replicas
      replicas: 3

  UserServiceClientAPI:
    build:
      context: ./userserviceclientapi
      dockerfile: Dockerfile
    image: userserviceclientapi:1
    restart: always
    networks:
      - netPRO290
    deploy:
      mode: replicas
      replicas: 3

  MovieServiceClientAPI:
    build:
      context: ./movieservice
      dockerfile: Dockerfile
    image: movieserviceclientapi:1
    restart: always
    ports:
      - "8070-8073:3000"
    networks:
      - netPRO290
    deploy:
      replicas: 3
    environment:
      - KAFKA_BROKER_SERVER=broker:29092
      - PORT=3000
      